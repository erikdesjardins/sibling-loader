import fs from 'fs';
import path from 'path';
import test from 'ava';

import loader from '../index';

function runLoader(request) {
	return new Promise((resolve, reject) => {
		loader.pitch.call({
			context: path.dirname(path.join(__dirname, request)),
			async: () => (err, result) => err ? reject(err) : resolve(result),
			addContextDependency: () => {},
			fs,
		}, request);
	});
}

test('invalid path', t => {
	t.throws(runLoader('./notARealPath/something.js'), /ENOENT/);
});

test('adds a context dependency', async t => {
	t.plan(2);

	await new Promise(r => {
		loader.pitch.call({
			context: path.dirname(path.join(__dirname, './src/a.js')),
			async: () => (err, result) => { t.truthy(result); r(); },
			addContextDependency: dep => t.is(dep, path.join(__dirname, 'src')),
			fs,
		}, './src/a.js');
	});
});

const header = '/* generated by sibling-loader */';

function p(file) {
	return JSON.stringify(path.join(__dirname, file));
}

test('js files', async t => {
	t.is(
		await runLoader('./src/a.js'),
		`
${header}
import * as _0 from ${p('./src/a.js')};
import * as _1 from ${p('./src/b.js')};
import * as _2 from ${p('./src/c.js')};
export default { "a.js": _0, "b.js": _1, "c.js": _2 };
		`.trim()
	);
});

test('txt files', async t => {
	t.is(
		await runLoader('./src/test.txt'),
		`
${header}
import * as _0 from ${p('./src/test.txt')};
export default { "test.txt": _0 };
		`.trim()
	);
});

test('md files', async t => {
	t.is(
		await runLoader('./src/foo.md'),
		`
${header}
import * as _0 from ${p('./src/bar.md')};
import * as _1 from ${p('./src/foo.md')};
export default { "bar.md": _0, "foo.md": _1 };
		`.trim()
	);
});
